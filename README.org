#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+title: FLUIDOS Security features
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.4 (Org mode 9.6.15)
#+cite_export:

* Security features
This repository showcases the security features and capabilities developed as part of the WP5 contributions to the FLUIDOS project, presented in a unified view. For each security feature, we provide documentation, integration files, links to demos or testbeds and relevant research topics that validate each implementation or design choice.

Moreover, it includes general instructions to support partners during the integration process.

|--------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Name                           | Description                                                                                                                                                                                                                                                                                                                                                                       |
|--------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[https://github.com/fluidos-project/cyber-deception][Cyber Deception]]                | The Cyber Deception feature, part of the FLUIDOS Cyber Security services designed to improve the overall security of the ecosystem, is willing to provide Cloud Native Cyber Deception as a Service (CDaaS) integrated into the FLUIDOS continuum.                                                                                                                                |
|--------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Intent-based border protection | The intent-based border protection is designed to secure dynamic workloads within the shared and heterogeneous infrastructure of the FLUIDOS continuum. Thanks to high-level user-defined intents, the solution eases the configuration of secure communication boundaries as soon as new resources are acquired, aligning consumer intents with provider network authorizations. |
|--------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[https://github.com/fluidos-project/idm-fluidos-aries-framework-go/][Privacy & Security Manager]]     |                                                                                                                                                                                                                                                                                                                                                                                   |
|--------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

* Types of Security features
** Integrated by Design
/Native security features embedded directly into the FLUIDOS protocol and architecture./


*Integrated by Design* features are natively embedded into the FLUIDOS architecture. They ensure that security functionalities are inherently available as part of the platform without requiring separate installation, configuration, or orchestration steps.

** Security Application
/Installed security features enhancing the node or infrastructure independently of the FLUIDOS core protocol./


A *Security Application* is any additional security feature that can be installed by administrators or users independently from the FLUIDOS core protocol. It enhances security at the node or infrastructure level without requiring integration with the FLUIDOS orchestration or advertisement mechanisms. Security Applications typically address specific user needs, such as monitoring, local cyber deception, or multi-tenancy support, and can be deployed based on the administrator's decision.

** Embedded Security Node Capability
/Security features already installed on the node, advertised through extra fields in the node's FLAVOR. Optionally configured per requester./

*Embedded Security Node Capability* features are security capabilities that are already installed on the FLUIDOS node and advertised by enriching the node's FLAVOR metadata with additional fields.
These features may be configured depending on the requesting application's needs, but no additional deployment is required.
This model is simple to use and leverages existing node functionality without requiring modification of the FLUIDOS node code.

** Custom Security Node Capability
/Security features not pre-installed on the node, expressed via a specific FLUIDOS Service category and dynamically deployed when needed./

*Custom Security Node Capability* features are not pre-installed on the node but can be dynamically deployed and activated by FLUIDOS through a specific Service category or ServiceBlueprint.
When such a capability is requested, the node will provision it at runtime, enabling generic and reusable security service integration.
To support this, the FLUIDOS node must be extended to recognize the new service category, define its parameters, default values, and implement the logic to deploy and configure it.
This approach allows broader flexibility but requires modification of the FLUIDOS node to support the new capability.


** Summary
|-----------------------------------+--------------------------------------+------------------------------------------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| Feature Type                      | Advertisement                        | Deployment Action                              | Examples                                                   | Integration Strategy                                                                                   |
|-----------------------------------+--------------------------------------+------------------------------------------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| Integrated by Design              | None                                 | Native, always present                         | Privacy & Security Manager                                 | Already part of FLUIDOS base components. No external integration needed                                |
| Security Application              | None                                 | Manual deployment, always-on                   | BeaCon, FLAD                                               | Part of the FLUIDOS node. No external integration needed                                               |
| Embedded Security Node Capability | Extra fields in FLAVOR               | Feature already installed, optional activation | MAGI, TEE, Cyber Deception, Intent-based Border Protection | Extend FLAVOR (Bastion or Meta Orchestrator). Support scheduling and configuration via Intent          |
| Custom Security Node Capability   | Service category or ServiceBlueprint | Dynamic deployment and activation at runtime   | Same as above, if not present on provider node             | Define Service category in FLUIDOS node. Implement parameters, defaults, and runtime integration logic |
|-----------------------------------+--------------------------------------+------------------------------------------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|

* Security features integration
** Integration of Embedded Security Node Capability
/Expose the capability via/ =security-feature= /field in node FLAVOR and validate through the Meta-Orchestrator./

1) *Expose Capability in Node FLAVOR*
   - Each node includes a =FLAVOR= CRD.
   - Add a =security-feature= attribute inside =additionalProperties=.
   - This attribute lists the security features currently pre-installed and available on the node.

2) *Declare Intent to Use the Capability*
   - If using the Meta-Orchestrator:
     - Add the desired =security-feature= via an annotation in the workload manifest.
     - Example:
       #+begin_src yaml
       annotations:
         fluidos-intent-<feature-name>: "true"
       #+end_src
     - Optional configuration parameters can be passed and validated through the related validation function.

   - If using the [[https://ants-gitlab.inf.um.es/bastion][Bastion Orchestrator]]:
     - Express the requirement by defining the appropriate policy via Medium-Level Security Policy Language (MSPL) statement.
     - More information can be found [[https://www.sciencedirect.com/science/article/pii/S1389128625003196][here]]

   Examples:
   - [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator/blob/demo-Y2-stable/utils/testbed/intent-demo.yaml][Intent Example]]

3) *Extend Meta-Orchestrator Validation*
   - Visit and fork the Meta-Orchestrator [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator][repository]]
   - Edit =fluidos_model_orchestrator/common.py=:
     - Register the new intent in the =KnownIntent= function.
     - Implement =validate_<feature-name>()= to check that:
       - the requested =security-feature= is listed in the node’s FLAVOR.
       - all required parameters are valid.
   - Submit the change as a pull request to the Meta-Orchestrator repository.

4) *Patch FLAVOR on Nodes*
   - On each node offering the capability, patch its =FLAVOR= to include the correct =security-feature= value(s).
   - Example patch file:
     #+begin_src yaml
spec:
  flavorType:
    typeData:
      properties:
        additionalProperties:
          security_features:
            <feature-name>: true
     #+end_src

5) *Test the Intent and Validation*
   - Use existing unit tests to verify Intent matching:
     - [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator/blob/main/tests/test_intent_satisfaction.py][Intent Satisfaction Test]]
   - Other examples and mockups can be found here:
     - [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator/tree/demo-Y2-stable/tests][Test Folder]]

6) *Run End-to-End Validation*
   - Launch an end-to-end test using the Meta-Orchestrator with =Kops=, verifying that a workload requesting the security feature is correctly scheduled.


** Integration of Custom Security Node Capability
/High-level steps to integrate a new security feature deployable via FLAVOR service category./

1) *Define the Service Category*
   - Name the category and define needed parameters and defaults.

2) *Update the FLUIDOS Node*
   - Add the category to the node codebase.
   - Handle parameter mapping and deployment logic.

3) *Ensure Permissions*
   - Check RBAC allows resource creation and management.

4) *Test and Document*
   - Validate functionality and document service usage.

*References*
- Node Integration Example: https://github.com/fluidos-project/node/pull/114
- Ontology: https://github.com/fluidos-project/fluidos-ontology
- REAR Models: https://github.com/fluidos-project/REAR-data-models
- FLAVOR Schema: https://github.com/fluidos-project/REAR-data-models/blob/master/models/schemas/flavor.schema.json


* How-To
** How-To create a Testbed
In order for every partner to test the implementation of each security feature a FLUIDOS testbed should be created. Here are pointers to the documentation for creating a testbed:
1) [[https://github.com/fluidos-project/node/blob/main/docs/installation/installation.md][FLUIDOS Node testbed installation]]
2) [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator/tree/main/utils/testbed][FLUIDOS Model-based Meta-Orchestrator testbed installation]]
